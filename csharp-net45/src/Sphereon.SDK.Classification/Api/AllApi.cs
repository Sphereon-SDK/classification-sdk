/* 
 * Classification API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Sphereon.SDK.Classification.Client;
using Sphereon.SDK.Classification.Model;

namespace Sphereon.SDK.Classification.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAllApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a projectId
        /// </summary>
        /// <remarks>
        /// Add a project Id. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>ClassificationJobResponse</returns>
        ClassificationJobResponse AddProjectId (string jobId, string projectId);

        /// <summary>
        /// Add a projectId
        /// </summary>
        /// <remarks>
        /// Add a project Id. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        ApiResponse<ClassificationJobResponse> AddProjectIdWithHttpInfo (string jobId, string projectId);
        /// <summary>
        /// Create classification job
        /// </summary>
        /// <remarks>
        /// Create a job using the given classification settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>ClassificationJobResponse</returns>
        ClassificationJobResponse CreateClassificationJob (ClassificationSettings classificationSettings);

        /// <summary>
        /// Create classification job
        /// </summary>
        /// <remarks>
        /// Create a job using the given classification settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        ApiResponse<ClassificationJobResponse> CreateClassificationJobWithHttpInfo (ClassificationSettings classificationSettings);
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// Create a new project using the given project settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>ProjectResponse</returns>
        ProjectResponse CreateProject (ProjectSettings projectsettings);

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// Create a new project using the given project settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        ApiResponse<ProjectResponse> CreateProjectWithHttpInfo (ProjectSettings projectsettings);
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Classification job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationJobResponse</returns>
        ClassificationJobResponse DeleteJob (string jobId);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Classification job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        ApiResponse<ClassificationJobResponse> DeleteJobWithHttpInfo (string jobId);
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// Delete the project including all related data.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ProjectResponse</returns>
        ProjectResponse DeleteProject (string projectId);

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// Delete the project including all related data.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        ApiResponse<ProjectResponse> DeleteProjectWithHttpInfo (string projectId);
        /// <summary>
        /// Delete project stream
        /// </summary>
        /// <remarks>
        /// Delete a stream in the project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>ProjectResponse</returns>
        ProjectResponse DeleteProjectStream (string projectId, string projectStreamLocationId);

        /// <summary>
        /// Delete project stream
        /// </summary>
        /// <remarks>
        /// Delete a stream in the project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        ApiResponse<ProjectResponse> DeleteProjectStreamWithHttpInfo (string projectId, string projectStreamLocationId);
        /// <summary>
        /// Classification result
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationResponse</returns>
        ClassificationResponse GetClassificationResult (string jobId);

        /// <summary>
        /// Classification result
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationResponse</returns>
        ApiResponse<ClassificationResponse> GetClassificationResultWithHttpInfo (string jobId);
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationJobResponse</returns>
        ClassificationJobResponse GetJobWithClaimParameters (string jobId);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        ApiResponse<ClassificationJobResponse> GetJobWithClaimParametersWithHttpInfo (string jobId);
        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all classification job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ClassificationJobResponse</returns>
        ClassificationJobResponse GetJobs (List<string> status = null);

        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all classification job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        ApiResponse<ClassificationJobResponse> GetJobsWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Get project
        /// </summary>
        /// <remarks>
        /// Get the info of an existing project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ProjectResponse</returns>
        ProjectResponse GetProject (string projectId);

        /// <summary>
        /// Get project
        /// </summary>
        /// <remarks>
        /// Get the info of an existing project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        ApiResponse<ProjectResponse> GetProjectWithHttpInfo (string projectId);
        /// <summary>
        /// Get project stream by locationid
        /// </summary>
        /// <remarks>
        /// Download the project data
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>byte[]</returns>
        byte[] GetProjectStreamByLocationId (string projectId, string projectStreamLocationId);

        /// <summary>
        /// Get project stream by locationid
        /// </summary>
        /// <remarks>
        /// Download the project data
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetProjectStreamByLocationIdWithHttpInfo (string projectId, string projectStreamLocationId);
        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get all project definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ProjectResponse</returns>
        ProjectResponse GetProjects (List<string> status = null);

        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get all project definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        ApiResponse<ProjectResponse> GetProjectsWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Submit classification job for processing
        /// </summary>
        /// <remarks>
        /// Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationJobResponse</returns>
        ClassificationJobResponse SubmitJob (string jobId);

        /// <summary>
        /// Submit classification job for processing
        /// </summary>
        /// <remarks>
        /// Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        ApiResponse<ClassificationJobResponse> SubmitJobWithHttpInfo (string jobId);
        /// <summary>
        /// Updated project stream
        /// </summary>
        /// <remarks>
        /// Update the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>StreamResponse</returns>
        StreamResponse UpdateProjectStream (string projectId, string projectStreamLocationId, System.IO.Stream stream);

        /// <summary>
        /// Updated project stream
        /// </summary>
        /// <remarks>
        /// Update the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>ApiResponse of StreamResponse</returns>
        ApiResponse<StreamResponse> UpdateProjectStreamWithHttpInfo (string projectId, string projectStreamLocationId, System.IO.Stream stream);
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload an input image. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>StreamResponse</returns>
        StreamResponse UploadInputFile (string jobId, System.IO.Stream stream);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload an input image. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>ApiResponse of StreamResponse</returns>
        ApiResponse<StreamResponse> UploadInputFileWithHttpInfo (string jobId, System.IO.Stream stream);
        /// <summary>
        /// Upload project stream
        /// </summary>
        /// <remarks>
        /// Upload the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>StreamResponse</returns>
        StreamResponse UploadProjectStream (string projectId, System.IO.Stream stream);

        /// <summary>
        /// Upload project stream
        /// </summary>
        /// <remarks>
        /// Upload the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>ApiResponse of StreamResponse</returns>
        ApiResponse<StreamResponse> UploadProjectStreamWithHttpInfo (string projectId, System.IO.Stream stream);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a projectId
        /// </summary>
        /// <remarks>
        /// Add a project Id. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        System.Threading.Tasks.Task<ClassificationJobResponse> AddProjectIdAsync (string jobId, string projectId);

        /// <summary>
        /// Add a projectId
        /// </summary>
        /// <remarks>
        /// Add a project Id. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> AddProjectIdAsyncWithHttpInfo (string jobId, string projectId);
        /// <summary>
        /// Create classification job
        /// </summary>
        /// <remarks>
        /// Create a job using the given classification settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        System.Threading.Tasks.Task<ClassificationJobResponse> CreateClassificationJobAsync (ClassificationSettings classificationSettings);

        /// <summary>
        /// Create classification job
        /// </summary>
        /// <remarks>
        /// Create a job using the given classification settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> CreateClassificationJobAsyncWithHttpInfo (ClassificationSettings classificationSettings);
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// Create a new project using the given project settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>Task of ProjectResponse</returns>
        System.Threading.Tasks.Task<ProjectResponse> CreateProjectAsync (ProjectSettings projectsettings);

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// Create a new project using the given project settings.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> CreateProjectAsyncWithHttpInfo (ProjectSettings projectsettings);
        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Classification job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        System.Threading.Tasks.Task<ClassificationJobResponse> DeleteJobAsync (string jobId);

        /// <summary>
        /// Delete a job manually
        /// </summary>
        /// <remarks>
        /// Delete the Classification job and all related files
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> DeleteJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// Delete the project including all related data.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ProjectResponse</returns>
        System.Threading.Tasks.Task<ProjectResponse> DeleteProjectAsync (string projectId);

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// Delete the project including all related data.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> DeleteProjectAsyncWithHttpInfo (string projectId);
        /// <summary>
        /// Delete project stream
        /// </summary>
        /// <remarks>
        /// Delete a stream in the project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of ProjectResponse</returns>
        System.Threading.Tasks.Task<ProjectResponse> DeleteProjectStreamAsync (string projectId, string projectStreamLocationId);

        /// <summary>
        /// Delete project stream
        /// </summary>
        /// <remarks>
        /// Delete a stream in the project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> DeleteProjectStreamAsyncWithHttpInfo (string projectId, string projectStreamLocationId);
        /// <summary>
        /// Classification result
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationResponse</returns>
        System.Threading.Tasks.Task<ClassificationResponse> GetClassificationResultAsync (string jobId);

        /// <summary>
        /// Classification result
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationResponse>> GetClassificationResultAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        System.Threading.Tasks.Task<ClassificationJobResponse> GetJobWithClaimParametersAsync (string jobId);

        /// <summary>
        /// Job definition and state
        /// </summary>
        /// <remarks>
        /// Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> GetJobWithClaimParametersAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all classification job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        System.Threading.Tasks.Task<ClassificationJobResponse> GetJobsAsync (List<string> status = null);

        /// <summary>
        /// Get all jobs
        /// </summary>
        /// <remarks>
        /// Get all classification job definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> GetJobsAsyncWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Get project
        /// </summary>
        /// <remarks>
        /// Get the info of an existing project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ProjectResponse</returns>
        System.Threading.Tasks.Task<ProjectResponse> GetProjectAsync (string projectId);

        /// <summary>
        /// Get project
        /// </summary>
        /// <remarks>
        /// Get the info of an existing project.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> GetProjectAsyncWithHttpInfo (string projectId);
        /// <summary>
        /// Get project stream by locationid
        /// </summary>
        /// <remarks>
        /// Download the project data
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetProjectStreamByLocationIdAsync (string projectId, string projectStreamLocationId);

        /// <summary>
        /// Get project stream by locationid
        /// </summary>
        /// <remarks>
        /// Download the project data
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetProjectStreamByLocationIdAsyncWithHttpInfo (string projectId, string projectStreamLocationId);
        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get all project definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ProjectResponse</returns>
        System.Threading.Tasks.Task<ProjectResponse> GetProjectsAsync (List<string> status = null);

        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get all project definitions and their current state.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> GetProjectsAsyncWithHttpInfo (List<string> status = null);
        /// <summary>
        /// Submit classification job for processing
        /// </summary>
        /// <remarks>
        /// Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        System.Threading.Tasks.Task<ClassificationJobResponse> SubmitJobAsync (string jobId);

        /// <summary>
        /// Submit classification job for processing
        /// </summary>
        /// <remarks>
        /// Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> SubmitJobAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Updated project stream
        /// </summary>
        /// <remarks>
        /// Update the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of StreamResponse</returns>
        System.Threading.Tasks.Task<StreamResponse> UpdateProjectStreamAsync (string projectId, string projectStreamLocationId, System.IO.Stream stream);

        /// <summary>
        /// Updated project stream
        /// </summary>
        /// <remarks>
        /// Update the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of ApiResponse (StreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResponse>> UpdateProjectStreamAsyncWithHttpInfo (string projectId, string projectStreamLocationId, System.IO.Stream stream);
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload an input image. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>Task of StreamResponse</returns>
        System.Threading.Tasks.Task<StreamResponse> UploadInputFileAsync (string jobId, System.IO.Stream stream);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Upload an input image. Classification will not be started yet.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>Task of ApiResponse (StreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResponse>> UploadInputFileAsyncWithHttpInfo (string jobId, System.IO.Stream stream);
        /// <summary>
        /// Upload project stream
        /// </summary>
        /// <remarks>
        /// Upload the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of StreamResponse</returns>
        System.Threading.Tasks.Task<StreamResponse> UploadProjectStreamAsync (string projectId, System.IO.Stream stream);

        /// <summary>
        /// Upload project stream
        /// </summary>
        /// <remarks>
        /// Upload the project data used by the classification engine.
        /// </remarks>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of ApiResponse (StreamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamResponse>> UploadProjectStreamAsyncWithHttpInfo (string projectId, System.IO.Stream stream);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AllApi : IAllApi
    {
        private Sphereon.SDK.Classification.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AllApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AllApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Sphereon.SDK.Classification.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AllApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AllApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Sphereon.SDK.Classification.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sphereon.SDK.Classification.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a projectId Add a project Id. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>ClassificationJobResponse</returns>
        public ClassificationJobResponse AddProjectId (string jobId, string projectId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = AddProjectIdWithHttpInfo(jobId, projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a projectId Add a project Id. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        public ApiResponse< ClassificationJobResponse > AddProjectIdWithHttpInfo (string jobId, string projectId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->AddProjectId");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->AddProjectId");

            var localVarPath = "/jobs/{jobId}/projects/{projectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Add a projectId Add a project Id. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationJobResponse> AddProjectIdAsync (string jobId, string projectId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = await AddProjectIdAsyncWithHttpInfo(jobId, projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a projectId Add a project Id. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> AddProjectIdAsyncWithHttpInfo (string jobId, string projectId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->AddProjectId");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->AddProjectId");

            var localVarPath = "/jobs/{jobId}/projects/{projectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddProjectId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Create classification job Create a job using the given classification settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>ClassificationJobResponse</returns>
        public ClassificationJobResponse CreateClassificationJob (ClassificationSettings classificationSettings)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = CreateClassificationJobWithHttpInfo(classificationSettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create classification job Create a job using the given classification settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        public ApiResponse< ClassificationJobResponse > CreateClassificationJobWithHttpInfo (ClassificationSettings classificationSettings)
        {
            // verify the required parameter 'classificationSettings' is set
            if (classificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'classificationSettings' when calling AllApi->CreateClassificationJob");

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (classificationSettings != null && classificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(classificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = classificationSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClassificationJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Create classification job Create a job using the given classification settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationJobResponse> CreateClassificationJobAsync (ClassificationSettings classificationSettings)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = await CreateClassificationJobAsyncWithHttpInfo(classificationSettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create classification job Create a job using the given classification settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classificationSettings">classificationSettings</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> CreateClassificationJobAsyncWithHttpInfo (ClassificationSettings classificationSettings)
        {
            // verify the required parameter 'classificationSettings' is set
            if (classificationSettings == null)
                throw new ApiException(400, "Missing required parameter 'classificationSettings' when calling AllApi->CreateClassificationJob");

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (classificationSettings != null && classificationSettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(classificationSettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = classificationSettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClassificationJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Create project Create a new project using the given project settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>ProjectResponse</returns>
        public ProjectResponse CreateProject (ProjectSettings projectsettings)
        {
             ApiResponse<ProjectResponse> localVarResponse = CreateProjectWithHttpInfo(projectsettings);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create project Create a new project using the given project settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        public ApiResponse< ProjectResponse > CreateProjectWithHttpInfo (ProjectSettings projectsettings)
        {
            // verify the required parameter 'projectsettings' is set
            if (projectsettings == null)
                throw new ApiException(400, "Missing required parameter 'projectsettings' when calling AllApi->CreateProject");

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectsettings != null && projectsettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectsettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectsettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Create project Create a new project using the given project settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>Task of ProjectResponse</returns>
        public async System.Threading.Tasks.Task<ProjectResponse> CreateProjectAsync (ProjectSettings projectsettings)
        {
             ApiResponse<ProjectResponse> localVarResponse = await CreateProjectAsyncWithHttpInfo(projectsettings);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create project Create a new project using the given project settings.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectsettings">The project settings</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> CreateProjectAsyncWithHttpInfo (ProjectSettings projectsettings)
        {
            // verify the required parameter 'projectsettings' is set
            if (projectsettings == null)
                throw new ApiException(400, "Missing required parameter 'projectsettings' when calling AllApi->CreateProject");

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectsettings != null && projectsettings.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectsettings); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectsettings; // byte array
            }

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Delete a job manually Delete the Classification job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationJobResponse</returns>
        public ClassificationJobResponse DeleteJob (string jobId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = DeleteJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a job manually Delete the Classification job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        public ApiResponse< ClassificationJobResponse > DeleteJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->DeleteJob");

            var localVarPath = "/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Delete a job manually Delete the Classification job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationJobResponse> DeleteJobAsync (string jobId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = await DeleteJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a job manually Delete the Classification job and all related files
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> DeleteJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->DeleteJob");

            var localVarPath = "/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Delete project Delete the project including all related data.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ProjectResponse</returns>
        public ProjectResponse DeleteProject (string projectId)
        {
             ApiResponse<ProjectResponse> localVarResponse = DeleteProjectWithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete project Delete the project including all related data.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        public ApiResponse< ProjectResponse > DeleteProjectWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->DeleteProject");

            var localVarPath = "/projects/{projectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Delete project Delete the project including all related data.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ProjectResponse</returns>
        public async System.Threading.Tasks.Task<ProjectResponse> DeleteProjectAsync (string projectId)
        {
             ApiResponse<ProjectResponse> localVarResponse = await DeleteProjectAsyncWithHttpInfo(projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete project Delete the project including all related data.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> DeleteProjectAsyncWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->DeleteProject");

            var localVarPath = "/projects/{projectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Delete project stream Delete a stream in the project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>ProjectResponse</returns>
        public ProjectResponse DeleteProjectStream (string projectId, string projectStreamLocationId)
        {
             ApiResponse<ProjectResponse> localVarResponse = DeleteProjectStreamWithHttpInfo(projectId, projectStreamLocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete project stream Delete a stream in the project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        public ApiResponse< ProjectResponse > DeleteProjectStreamWithHttpInfo (string projectId, string projectStreamLocationId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->DeleteProjectStream");
            // verify the required parameter 'projectStreamLocationId' is set
            if (projectStreamLocationId == null)
                throw new ApiException(400, "Missing required parameter 'projectStreamLocationId' when calling AllApi->DeleteProjectStream");

            var localVarPath = "/projects/{projectId}/streams/{projectStreamLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectStreamLocationId != null) localVarPathParams.Add("projectStreamLocationId", Configuration.ApiClient.ParameterToString(projectStreamLocationId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Delete project stream Delete a stream in the project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of ProjectResponse</returns>
        public async System.Threading.Tasks.Task<ProjectResponse> DeleteProjectStreamAsync (string projectId, string projectStreamLocationId)
        {
             ApiResponse<ProjectResponse> localVarResponse = await DeleteProjectStreamAsyncWithHttpInfo(projectId, projectStreamLocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete project stream Delete a stream in the project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> DeleteProjectStreamAsyncWithHttpInfo (string projectId, string projectStreamLocationId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->DeleteProjectStream");
            // verify the required parameter 'projectStreamLocationId' is set
            if (projectStreamLocationId == null)
                throw new ApiException(400, "Missing required parameter 'projectStreamLocationId' when calling AllApi->DeleteProjectStream");

            var localVarPath = "/projects/{projectId}/streams/{projectStreamLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectStreamLocationId != null) localVarPathParams.Add("projectStreamLocationId", Configuration.ApiClient.ParameterToString(projectStreamLocationId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProjectStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Classification result Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationResponse</returns>
        public ClassificationResponse GetClassificationResult (string jobId)
        {
             ApiResponse<ClassificationResponse> localVarResponse = GetClassificationResultWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Classification result Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationResponse</returns>
        public ApiResponse< ClassificationResponse > GetClassificationResultWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->GetClassificationResult");

            var localVarPath = "/jobs/{jobId}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClassificationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResponse)));
        }

        /// <summary>
        /// Classification result Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationResponse> GetClassificationResultAsync (string jobId)
        {
             ApiResponse<ClassificationResponse> localVarResponse = await GetClassificationResultAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Classification result Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationResponse>> GetClassificationResultAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->GetClassificationResult");

            var localVarPath = "/jobs/{jobId}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClassificationResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResponse)));
        }

        /// <summary>
        /// Job definition and state Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationJobResponse</returns>
        public ClassificationJobResponse GetJobWithClaimParameters (string jobId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = GetJobWithClaimParametersWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Job definition and state Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        public ApiResponse< ClassificationJobResponse > GetJobWithClaimParametersWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->GetJobWithClaimParameters");

            var localVarPath = "/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobWithClaimParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Job definition and state Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationJobResponse> GetJobWithClaimParametersAsync (string jobId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = await GetJobWithClaimParametersAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Job definition and state Get the classification job definition and current state. Please not that you can differentiate based on http response status
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> GetJobWithClaimParametersAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->GetJobWithClaimParameters");

            var localVarPath = "/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobWithClaimParameters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Get all jobs Get all classification job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ClassificationJobResponse</returns>
        public ClassificationJobResponse GetJobs (List<string> status = null)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = GetJobsWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all jobs Get all classification job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        public ApiResponse< ClassificationJobResponse > GetJobsWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Get all jobs Get all classification job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationJobResponse> GetJobsAsync (List<string> status = null)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = await GetJobsAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all jobs Get all classification job definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> GetJobsAsyncWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Get project Get the info of an existing project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ProjectResponse</returns>
        public ProjectResponse GetProject (string projectId)
        {
             ApiResponse<ProjectResponse> localVarResponse = GetProjectWithHttpInfo(projectId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project Get the info of an existing project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        public ApiResponse< ProjectResponse > GetProjectWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->GetProject");

            var localVarPath = "/projects/{projectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Get project Get the info of an existing project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ProjectResponse</returns>
        public async System.Threading.Tasks.Task<ProjectResponse> GetProjectAsync (string projectId)
        {
             ApiResponse<ProjectResponse> localVarResponse = await GetProjectAsyncWithHttpInfo(projectId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project Get the info of an existing project.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> GetProjectAsyncWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->GetProject");

            var localVarPath = "/projects/{projectId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Get project stream by locationid Download the project data
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>byte[]</returns>
        public byte[] GetProjectStreamByLocationId (string projectId, string projectStreamLocationId)
        {
             ApiResponse<byte[]> localVarResponse = GetProjectStreamByLocationIdWithHttpInfo(projectId, projectStreamLocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project stream by locationid Download the project data
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GetProjectStreamByLocationIdWithHttpInfo (string projectId, string projectStreamLocationId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->GetProjectStreamByLocationId");
            // verify the required parameter 'projectStreamLocationId' is set
            if (projectStreamLocationId == null)
                throw new ApiException(400, "Missing required parameter 'projectStreamLocationId' when calling AllApi->GetProjectStreamByLocationId");

            var localVarPath = "/projects/{projectId}/streams/{projectStreamLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectStreamLocationId != null) localVarPathParams.Add("projectStreamLocationId", Configuration.ApiClient.ParameterToString(projectStreamLocationId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectStreamByLocationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get project stream by locationid Download the project data
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetProjectStreamByLocationIdAsync (string projectId, string projectStreamLocationId)
        {
             ApiResponse<byte[]> localVarResponse = await GetProjectStreamByLocationIdAsyncWithHttpInfo(projectId, projectStreamLocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project stream by locationid Download the project data
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GetProjectStreamByLocationIdAsyncWithHttpInfo (string projectId, string projectStreamLocationId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->GetProjectStreamByLocationId");
            // verify the required parameter 'projectStreamLocationId' is set
            if (projectStreamLocationId == null)
                throw new ApiException(400, "Missing required parameter 'projectStreamLocationId' when calling AllApi->GetProjectStreamByLocationId");

            var localVarPath = "/projects/{projectId}/streams/{projectStreamLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectStreamLocationId != null) localVarPathParams.Add("projectStreamLocationId", Configuration.ApiClient.ParameterToString(projectStreamLocationId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectStreamByLocationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get all projects Get all project definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ProjectResponse</returns>
        public ProjectResponse GetProjects (List<string> status = null)
        {
             ApiResponse<ProjectResponse> localVarResponse = GetProjectsWithHttpInfo(status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all projects Get all project definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>ApiResponse of ProjectResponse</returns>
        public ApiResponse< ProjectResponse > GetProjectsWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Get all projects Get all project definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ProjectResponse</returns>
        public async System.Threading.Tasks.Task<ProjectResponse> GetProjectsAsync (List<string> status = null)
        {
             ApiResponse<ProjectResponse> localVarResponse = await GetProjectsAsyncWithHttpInfo(status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all projects Get all project definitions and their current state.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">A list of status to filter on. (optional)</param>
        /// <returns>Task of ApiResponse (ProjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectResponse>> GetProjectsAsyncWithHttpInfo (List<string> status = null)
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectResponse)));
        }

        /// <summary>
        /// Submit classification job for processing Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ClassificationJobResponse</returns>
        public ClassificationJobResponse SubmitJob (string jobId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = SubmitJobWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submit classification job for processing Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>ApiResponse of ClassificationJobResponse</returns>
        public ApiResponse< ClassificationJobResponse > SubmitJobWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->SubmitJob");

            var localVarPath = "/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Submit classification job for processing Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ClassificationJobResponse</returns>
        public async System.Threading.Tasks.Task<ClassificationJobResponse> SubmitJobAsync (string jobId)
        {
             ApiResponse<ClassificationJobResponse> localVarResponse = await SubmitJobAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submit classification job for processing Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <returns>Task of ApiResponse (ClassificationJobResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationJobResponse>> SubmitJobAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->SubmitJob");

            var localVarPath = "/jobs/{jobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationJobResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationJobResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationJobResponse)));
        }

        /// <summary>
        /// Updated project stream Update the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>StreamResponse</returns>
        public StreamResponse UpdateProjectStream (string projectId, string projectStreamLocationId, System.IO.Stream stream)
        {
             ApiResponse<StreamResponse> localVarResponse = UpdateProjectStreamWithHttpInfo(projectId, projectStreamLocationId, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updated project stream Update the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>ApiResponse of StreamResponse</returns>
        public ApiResponse< StreamResponse > UpdateProjectStreamWithHttpInfo (string projectId, string projectStreamLocationId, System.IO.Stream stream)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->UpdateProjectStream");
            // verify the required parameter 'projectStreamLocationId' is set
            if (projectStreamLocationId == null)
                throw new ApiException(400, "Missing required parameter 'projectStreamLocationId' when calling AllApi->UpdateProjectStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UpdateProjectStream");

            var localVarPath = "/projects/{projectId}/streams/{projectStreamLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectStreamLocationId != null) localVarPathParams.Add("projectStreamLocationId", Configuration.ApiClient.ParameterToString(projectStreamLocationId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProjectStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponse)));
        }

        /// <summary>
        /// Updated project stream Update the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of StreamResponse</returns>
        public async System.Threading.Tasks.Task<StreamResponse> UpdateProjectStreamAsync (string projectId, string projectStreamLocationId, System.IO.Stream stream)
        {
             ApiResponse<StreamResponse> localVarResponse = await UpdateProjectStreamAsyncWithHttpInfo(projectId, projectStreamLocationId, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updated project stream Update the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="projectStreamLocationId">projectStreamLocationId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of ApiResponse (StreamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamResponse>> UpdateProjectStreamAsyncWithHttpInfo (string projectId, string projectStreamLocationId, System.IO.Stream stream)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->UpdateProjectStream");
            // verify the required parameter 'projectStreamLocationId' is set
            if (projectStreamLocationId == null)
                throw new ApiException(400, "Missing required parameter 'projectStreamLocationId' when calling AllApi->UpdateProjectStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UpdateProjectStream");

            var localVarPath = "/projects/{projectId}/streams/{projectStreamLocationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectStreamLocationId != null) localVarPathParams.Add("projectStreamLocationId", Configuration.ApiClient.ParameterToString(projectStreamLocationId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProjectStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponse)));
        }

        /// <summary>
        /// Upload a file Upload an input image. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>StreamResponse</returns>
        public StreamResponse UploadInputFile (string jobId, System.IO.Stream stream)
        {
             ApiResponse<StreamResponse> localVarResponse = UploadInputFileWithHttpInfo(jobId, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file Upload an input image. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>ApiResponse of StreamResponse</returns>
        public ApiResponse< StreamResponse > UploadInputFileWithHttpInfo (string jobId, System.IO.Stream stream)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->UploadInputFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UploadInputFile");

            var localVarPath = "/jobs/{jobId}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadInputFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponse)));
        }

        /// <summary>
        /// Upload a file Upload an input image. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>Task of StreamResponse</returns>
        public async System.Threading.Tasks.Task<StreamResponse> UploadInputFileAsync (string jobId, System.IO.Stream stream)
        {
             ApiResponse<StreamResponse> localVarResponse = await UploadInputFileAsyncWithHttpInfo(jobId, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a file Upload an input image. Classification will not be started yet.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">jobId</param>
        /// <param name="stream">The additional binary image (file/inputstream) to be classified</param>
        /// <returns>Task of ApiResponse (StreamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamResponse>> UploadInputFileAsyncWithHttpInfo (string jobId, System.IO.Stream stream)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling AllApi->UploadInputFile");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UploadInputFile");

            var localVarPath = "/jobs/{jobId}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("jobId", Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadInputFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponse)));
        }

        /// <summary>
        /// Upload project stream Upload the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>StreamResponse</returns>
        public StreamResponse UploadProjectStream (string projectId, System.IO.Stream stream)
        {
             ApiResponse<StreamResponse> localVarResponse = UploadProjectStreamWithHttpInfo(projectId, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload project stream Upload the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>ApiResponse of StreamResponse</returns>
        public ApiResponse< StreamResponse > UploadProjectStreamWithHttpInfo (string projectId, System.IO.Stream stream)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->UploadProjectStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UploadProjectStream");

            var localVarPath = "/projects/{projectId}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadProjectStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponse)));
        }

        /// <summary>
        /// Upload project stream Upload the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of StreamResponse</returns>
        public async System.Threading.Tasks.Task<StreamResponse> UploadProjectStreamAsync (string projectId, System.IO.Stream stream)
        {
             ApiResponse<StreamResponse> localVarResponse = await UploadProjectStreamAsyncWithHttpInfo(projectId, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload project stream Upload the project data used by the classification engine.
        /// </summary>
        /// <exception cref="Sphereon.SDK.Classification.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">projectId</param>
        /// <param name="stream">The project data</param>
        /// <returns>Task of ApiResponse (StreamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamResponse>> UploadProjectStreamAsyncWithHttpInfo (string projectId, System.IO.Stream stream)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AllApi->UploadProjectStream");
            // verify the required parameter 'stream' is set
            if (stream == null)
                throw new ApiException(400, "Missing required parameter 'stream' when calling AllApi->UploadProjectStream");

            var localVarPath = "/projects/{projectId}/streams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json;charset=UTF-8"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("projectId", Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (stream != null) localVarFileParams.Add("stream", Configuration.ApiClient.ParameterToFile("stream", stream));

            // authentication (oauth2schema) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadProjectStream", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamResponse)));
        }

    }
}
