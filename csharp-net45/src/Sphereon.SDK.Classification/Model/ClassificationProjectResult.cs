/* 
 * Classification API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// The result from document classification
    /// </summary>
    [DataContract]
    public partial class ClassificationProjectResult :  IEquatable<ClassificationProjectResult>
    {
        /// <summary>
        /// Classification type
        /// </summary>
        /// <value>Classification type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClassificationTypeEnum
        {
            
            /// <summary>
            /// Enum DOCUMENT for "DOCUMENT"
            /// </summary>
            [EnumMember(Value = "DOCUMENT")]
            DOCUMENT,
            
            /// <summary>
            /// Enum PAGES for "PAGES"
            /// </summary>
            [EnumMember(Value = "PAGES")]
            PAGES,
            
            /// <summary>
            /// Enum DOCUMENTSEPARATION for "DOCUMENT_SEPARATION"
            /// </summary>
            [EnumMember(Value = "DOCUMENT_SEPARATION")]
            DOCUMENTSEPARATION
        }


        /// <summary>
        /// Gets or Sets ResultType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultTypeEnum
        {
            
            /// <summary>
            /// Enum INLINE for "INLINE"
            /// </summary>
            [EnumMember(Value = "INLINE")]
            INLINE,
            
            /// <summary>
            /// Enum STORAGE for "STORAGE"
            /// </summary>
            [EnumMember(Value = "STORAGE")]
            STORAGE
        }

        /// <summary>
        /// Classification type
        /// </summary>
        /// <value>Classification type</value>
        [DataMember(Name="classificationType", EmitDefaultValue=false)]
        public ClassificationTypeEnum? ClassificationType { get; set; }
        /// <summary>
        /// Returned result in response and/or store
        /// </summary>
        /// <value>Returned result in response and/or store</value>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public List<ResultTypeEnum> ResultType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationProjectResult" /> class.
        /// </summary>
        /// <param name="Inline">Storage of classification result in response.</param>
        /// <param name="Stream">External storage of classification result.</param>
        /// <param name="ClassificationType">Classification type.</param>
        /// <param name="ProjectId">Project id.</param>
        /// <param name="ResultType">Returned result in response and/or store.</param>
        public ClassificationProjectResult(Inline Inline = null, Stream Stream = null, ClassificationTypeEnum? ClassificationType = null, string ProjectId = null, List<ResultTypeEnum> ResultType = null)
        {
            this.Inline = Inline;
            this.Stream = Stream;
            this.ClassificationType = ClassificationType;
            this.ProjectId = ProjectId;
            this.ResultType = ResultType;
        }
        
        /// <summary>
        /// Storage of classification result in response
        /// </summary>
        /// <value>Storage of classification result in response</value>
        [DataMember(Name="inline", EmitDefaultValue=false)]
        public Inline Inline { get; set; }
        /// <summary>
        /// External storage of classification result
        /// </summary>
        /// <value>External storage of classification result</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public Stream Stream { get; set; }
        /// <summary>
        /// Project id
        /// </summary>
        /// <value>Project id</value>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassificationProjectResult {\n");
            sb.Append("  Inline: ").Append(Inline).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  ClassificationType: ").Append(ClassificationType).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClassificationProjectResult);
        }

        /// <summary>
        /// Returns true if ClassificationProjectResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ClassificationProjectResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassificationProjectResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Inline == other.Inline ||
                    this.Inline != null &&
                    this.Inline.Equals(other.Inline)
                ) && 
                (
                    this.Stream == other.Stream ||
                    this.Stream != null &&
                    this.Stream.Equals(other.Stream)
                ) && 
                (
                    this.ClassificationType == other.ClassificationType ||
                    this.ClassificationType != null &&
                    this.ClassificationType.Equals(other.ClassificationType)
                ) && 
                (
                    this.ProjectId == other.ProjectId ||
                    this.ProjectId != null &&
                    this.ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    this.ResultType == other.ResultType ||
                    this.ResultType != null &&
                    this.ResultType.SequenceEqual(other.ResultType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Inline != null)
                    hash = hash * 59 + this.Inline.GetHashCode();
                if (this.Stream != null)
                    hash = hash * 59 + this.Stream.GetHashCode();
                if (this.ClassificationType != null)
                    hash = hash * 59 + this.ClassificationType.GetHashCode();
                if (this.ProjectId != null)
                    hash = hash * 59 + this.ProjectId.GetHashCode();
                if (this.ResultType != null)
                    hash = hash * 59 + this.ResultType.GetHashCode();
                return hash;
            }
        }
    }

}
