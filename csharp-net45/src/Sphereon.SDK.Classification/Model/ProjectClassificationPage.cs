/* 
 * Classification API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Classification.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// The classification result page
    /// </summary>
    [DataContract]
    public partial class ProjectClassificationPage :  IEquatable<ProjectClassificationPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClassificationPage" /> class.
        /// </summary>
        /// <param name="ClassifiedClassName">classifiedClassName.</param>
        /// <param name="FeatureHighlightings">featureHighlightings.</param>
        /// <param name="PageNumber">Page number.</param>
        /// <param name="TextLines">textLines.</param>
        /// <param name="SkipContentClassification">skipContentClassification.</param>
        /// <param name="ClassificationResults">A list of classification results.</param>
        /// <param name="RotationType">rotationType.</param>
        /// <param name="ConfidentDocumentClassificationResult">confidentDocumentClassificationResult.</param>
        /// <param name="AssignedClassName">assignedClassName.</param>
        /// <param name="SeparationResults">separationResults.</param>
        /// <param name="Xresolution">Xresolution.</param>
        /// <param name="OriginalPageNumber">originalPageNumber.</param>
        /// <param name="HasPageText">hasPageText.</param>
        /// <param name="SplitConfidence">splitConfidence.</param>
        /// <param name="Yresolution">Yresolution.</param>
        /// <param name="SeparationFeatureHighlightings">separationFeatureHighlightings.</param>
        /// <param name="SplitBeforePage">splitBeforePage.</param>
        public ProjectClassificationPage(string ClassifiedClassName = default(string), List<ProjectClassificationClassifierFeature> FeatureHighlightings = default(List<ProjectClassificationClassifierFeature>), int? PageNumber = default(int?), List<ProjectClassificationTextLine> TextLines = default(List<ProjectClassificationTextLine>), bool? SkipContentClassification = default(bool?), List<ProjectClassificationResult> ClassificationResults = default(List<ProjectClassificationResult>), string RotationType = default(string), bool? ConfidentDocumentClassificationResult = default(bool?), string AssignedClassName = default(string), List<ProjectClassificationResult> SeparationResults = default(List<ProjectClassificationResult>), double? Xresolution = default(double?), int? OriginalPageNumber = default(int?), bool? HasPageText = default(bool?), double? SplitConfidence = default(double?), double? Yresolution = default(double?), List<ProjectClassificationClassifierFeature> SeparationFeatureHighlightings = default(List<ProjectClassificationClassifierFeature>), bool? SplitBeforePage = default(bool?))
        {
            this.ClassifiedClassName = ClassifiedClassName;
            this.FeatureHighlightings = FeatureHighlightings;
            this.PageNumber = PageNumber;
            this.TextLines = TextLines;
            this.SkipContentClassification = SkipContentClassification;
            this.ClassificationResults = ClassificationResults;
            this.RotationType = RotationType;
            this.ConfidentDocumentClassificationResult = ConfidentDocumentClassificationResult;
            this.AssignedClassName = AssignedClassName;
            this.SeparationResults = SeparationResults;
            this.Xresolution = Xresolution;
            this.OriginalPageNumber = OriginalPageNumber;
            this.HasPageText = HasPageText;
            this.SplitConfidence = SplitConfidence;
            this.Yresolution = Yresolution;
            this.SeparationFeatureHighlightings = SeparationFeatureHighlightings;
            this.SplitBeforePage = SplitBeforePage;
        }
        
        /// <summary>
        /// classifiedClassName
        /// </summary>
        /// <value>classifiedClassName</value>
        [DataMember(Name="classifiedClassName", EmitDefaultValue=false)]
        public string ClassifiedClassName { get; set; }

        /// <summary>
        /// featureHighlightings
        /// </summary>
        /// <value>featureHighlightings</value>
        [DataMember(Name="featureHighlightings", EmitDefaultValue=false)]
        public List<ProjectClassificationClassifierFeature> FeatureHighlightings { get; set; }

        /// <summary>
        /// Page number
        /// </summary>
        /// <value>Page number</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public int? PageNumber { get; set; }

        /// <summary>
        /// textLines
        /// </summary>
        /// <value>textLines</value>
        [DataMember(Name="textLines", EmitDefaultValue=false)]
        public List<ProjectClassificationTextLine> TextLines { get; set; }

        /// <summary>
        /// skipContentClassification
        /// </summary>
        /// <value>skipContentClassification</value>
        [DataMember(Name="skipContentClassification", EmitDefaultValue=false)]
        public bool? SkipContentClassification { get; set; }

        /// <summary>
        /// A list of classification results
        /// </summary>
        /// <value>A list of classification results</value>
        [DataMember(Name="classificationResults", EmitDefaultValue=false)]
        public List<ProjectClassificationResult> ClassificationResults { get; set; }

        /// <summary>
        /// rotationType
        /// </summary>
        /// <value>rotationType</value>
        [DataMember(Name="rotationType", EmitDefaultValue=false)]
        public string RotationType { get; set; }

        /// <summary>
        /// confidentDocumentClassificationResult
        /// </summary>
        /// <value>confidentDocumentClassificationResult</value>
        [DataMember(Name="confidentDocumentClassificationResult", EmitDefaultValue=false)]
        public bool? ConfidentDocumentClassificationResult { get; set; }

        /// <summary>
        /// assignedClassName
        /// </summary>
        /// <value>assignedClassName</value>
        [DataMember(Name="assignedClassName", EmitDefaultValue=false)]
        public string AssignedClassName { get; set; }

        /// <summary>
        /// separationResults
        /// </summary>
        /// <value>separationResults</value>
        [DataMember(Name="separationResults", EmitDefaultValue=false)]
        public List<ProjectClassificationResult> SeparationResults { get; set; }

        /// <summary>
        /// Gets or Sets Xresolution
        /// </summary>
        [DataMember(Name="xresolution", EmitDefaultValue=false)]
        public double? Xresolution { get; set; }

        /// <summary>
        /// originalPageNumber
        /// </summary>
        /// <value>originalPageNumber</value>
        [DataMember(Name="originalPageNumber", EmitDefaultValue=false)]
        public int? OriginalPageNumber { get; set; }

        /// <summary>
        /// hasPageText
        /// </summary>
        /// <value>hasPageText</value>
        [DataMember(Name="hasPageText", EmitDefaultValue=false)]
        public bool? HasPageText { get; set; }

        /// <summary>
        /// splitConfidence
        /// </summary>
        /// <value>splitConfidence</value>
        [DataMember(Name="splitConfidence", EmitDefaultValue=false)]
        public double? SplitConfidence { get; set; }

        /// <summary>
        /// Gets or Sets Yresolution
        /// </summary>
        [DataMember(Name="yresolution", EmitDefaultValue=false)]
        public double? Yresolution { get; set; }

        /// <summary>
        /// separationFeatureHighlightings
        /// </summary>
        /// <value>separationFeatureHighlightings</value>
        [DataMember(Name="separationFeatureHighlightings", EmitDefaultValue=false)]
        public List<ProjectClassificationClassifierFeature> SeparationFeatureHighlightings { get; set; }

        /// <summary>
        /// splitBeforePage
        /// </summary>
        /// <value>splitBeforePage</value>
        [DataMember(Name="splitBeforePage", EmitDefaultValue=false)]
        public bool? SplitBeforePage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectClassificationPage {\n");
            sb.Append("  ClassifiedClassName: ").Append(ClassifiedClassName).Append("\n");
            sb.Append("  FeatureHighlightings: ").Append(FeatureHighlightings).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  TextLines: ").Append(TextLines).Append("\n");
            sb.Append("  SkipContentClassification: ").Append(SkipContentClassification).Append("\n");
            sb.Append("  ClassificationResults: ").Append(ClassificationResults).Append("\n");
            sb.Append("  RotationType: ").Append(RotationType).Append("\n");
            sb.Append("  ConfidentDocumentClassificationResult: ").Append(ConfidentDocumentClassificationResult).Append("\n");
            sb.Append("  AssignedClassName: ").Append(AssignedClassName).Append("\n");
            sb.Append("  SeparationResults: ").Append(SeparationResults).Append("\n");
            sb.Append("  Xresolution: ").Append(Xresolution).Append("\n");
            sb.Append("  OriginalPageNumber: ").Append(OriginalPageNumber).Append("\n");
            sb.Append("  HasPageText: ").Append(HasPageText).Append("\n");
            sb.Append("  SplitConfidence: ").Append(SplitConfidence).Append("\n");
            sb.Append("  Yresolution: ").Append(Yresolution).Append("\n");
            sb.Append("  SeparationFeatureHighlightings: ").Append(SeparationFeatureHighlightings).Append("\n");
            sb.Append("  SplitBeforePage: ").Append(SplitBeforePage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProjectClassificationPage);
        }

        /// <summary>
        /// Returns true if ProjectClassificationPage instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectClassificationPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectClassificationPage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ClassifiedClassName == other.ClassifiedClassName ||
                    this.ClassifiedClassName != null &&
                    this.ClassifiedClassName.Equals(other.ClassifiedClassName)
                ) && 
                (
                    this.FeatureHighlightings == other.FeatureHighlightings ||
                    this.FeatureHighlightings != null &&
                    this.FeatureHighlightings.SequenceEqual(other.FeatureHighlightings)
                ) && 
                (
                    this.PageNumber == other.PageNumber ||
                    this.PageNumber != null &&
                    this.PageNumber.Equals(other.PageNumber)
                ) && 
                (
                    this.TextLines == other.TextLines ||
                    this.TextLines != null &&
                    this.TextLines.SequenceEqual(other.TextLines)
                ) && 
                (
                    this.SkipContentClassification == other.SkipContentClassification ||
                    this.SkipContentClassification != null &&
                    this.SkipContentClassification.Equals(other.SkipContentClassification)
                ) && 
                (
                    this.ClassificationResults == other.ClassificationResults ||
                    this.ClassificationResults != null &&
                    this.ClassificationResults.SequenceEqual(other.ClassificationResults)
                ) && 
                (
                    this.RotationType == other.RotationType ||
                    this.RotationType != null &&
                    this.RotationType.Equals(other.RotationType)
                ) && 
                (
                    this.ConfidentDocumentClassificationResult == other.ConfidentDocumentClassificationResult ||
                    this.ConfidentDocumentClassificationResult != null &&
                    this.ConfidentDocumentClassificationResult.Equals(other.ConfidentDocumentClassificationResult)
                ) && 
                (
                    this.AssignedClassName == other.AssignedClassName ||
                    this.AssignedClassName != null &&
                    this.AssignedClassName.Equals(other.AssignedClassName)
                ) && 
                (
                    this.SeparationResults == other.SeparationResults ||
                    this.SeparationResults != null &&
                    this.SeparationResults.SequenceEqual(other.SeparationResults)
                ) && 
                (
                    this.Xresolution == other.Xresolution ||
                    this.Xresolution != null &&
                    this.Xresolution.Equals(other.Xresolution)
                ) && 
                (
                    this.OriginalPageNumber == other.OriginalPageNumber ||
                    this.OriginalPageNumber != null &&
                    this.OriginalPageNumber.Equals(other.OriginalPageNumber)
                ) && 
                (
                    this.HasPageText == other.HasPageText ||
                    this.HasPageText != null &&
                    this.HasPageText.Equals(other.HasPageText)
                ) && 
                (
                    this.SplitConfidence == other.SplitConfidence ||
                    this.SplitConfidence != null &&
                    this.SplitConfidence.Equals(other.SplitConfidence)
                ) && 
                (
                    this.Yresolution == other.Yresolution ||
                    this.Yresolution != null &&
                    this.Yresolution.Equals(other.Yresolution)
                ) && 
                (
                    this.SeparationFeatureHighlightings == other.SeparationFeatureHighlightings ||
                    this.SeparationFeatureHighlightings != null &&
                    this.SeparationFeatureHighlightings.SequenceEqual(other.SeparationFeatureHighlightings)
                ) && 
                (
                    this.SplitBeforePage == other.SplitBeforePage ||
                    this.SplitBeforePage != null &&
                    this.SplitBeforePage.Equals(other.SplitBeforePage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ClassifiedClassName != null)
                    hash = hash * 59 + this.ClassifiedClassName.GetHashCode();
                if (this.FeatureHighlightings != null)
                    hash = hash * 59 + this.FeatureHighlightings.GetHashCode();
                if (this.PageNumber != null)
                    hash = hash * 59 + this.PageNumber.GetHashCode();
                if (this.TextLines != null)
                    hash = hash * 59 + this.TextLines.GetHashCode();
                if (this.SkipContentClassification != null)
                    hash = hash * 59 + this.SkipContentClassification.GetHashCode();
                if (this.ClassificationResults != null)
                    hash = hash * 59 + this.ClassificationResults.GetHashCode();
                if (this.RotationType != null)
                    hash = hash * 59 + this.RotationType.GetHashCode();
                if (this.ConfidentDocumentClassificationResult != null)
                    hash = hash * 59 + this.ConfidentDocumentClassificationResult.GetHashCode();
                if (this.AssignedClassName != null)
                    hash = hash * 59 + this.AssignedClassName.GetHashCode();
                if (this.SeparationResults != null)
                    hash = hash * 59 + this.SeparationResults.GetHashCode();
                if (this.Xresolution != null)
                    hash = hash * 59 + this.Xresolution.GetHashCode();
                if (this.OriginalPageNumber != null)
                    hash = hash * 59 + this.OriginalPageNumber.GetHashCode();
                if (this.HasPageText != null)
                    hash = hash * 59 + this.HasPageText.GetHashCode();
                if (this.SplitConfidence != null)
                    hash = hash * 59 + this.SplitConfidence.GetHashCode();
                if (this.Yresolution != null)
                    hash = hash * 59 + this.Yresolution.GetHashCode();
                if (this.SeparationFeatureHighlightings != null)
                    hash = hash * 59 + this.SeparationFeatureHighlightings.GetHashCode();
                if (this.SplitBeforePage != null)
                    hash = hash * 59 + this.SplitBeforePage.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
