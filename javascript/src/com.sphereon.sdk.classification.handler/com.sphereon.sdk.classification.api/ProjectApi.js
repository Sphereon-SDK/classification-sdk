/**
 * Classification API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.sphereon.sdk.classification.handler/ApiClient', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectResponse', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectSettings', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamLocation', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.sphereon.sdk.classification.model/ProjectResponse'), require('../com.sphereon.sdk.classification.model/ProjectSettings'), require('../com.sphereon.sdk.classification.model/StreamLocation'), require('../com.sphereon.sdk.classification.model/StreamResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.classification) {
      root.classification = {};
    }
    root.classification.ProjectApi = factory(root.classification.ApiClient, root.classification.ProjectResponse, root.classification.ProjectSettings, root.classification.StreamLocation, root.classification.StreamResponse);
  }
}(this, function(ApiClient, ProjectResponse, ProjectSettings, StreamLocation, StreamResponse) {
  'use strict';

  /**
   * Project service.
   * @module com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.api/ProjectApi
   * @version 0.3.2
   */

  /**
   * Constructs a new ProjectApi. 
   * @alias module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.api/ProjectApi
   * @class
   * @param {module:com.sphereon.sdk.classification.handler/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:com.sphereon.sdk.classification.handler/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create project
     * Create a new project using the given project settings.
     * @param {module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectSettings} projectsettings The project settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectResponse}
     */
    this.createProject = function(projectsettings) {
      var postBody = projectsettings;

      // verify the required parameter 'projectsettings' is set
      if (projectsettings == undefined || projectsettings == null) {
        throw "Missing the required parameter 'projectsettings' when calling createProject";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ProjectResponse;

      return this.apiClient.callApi(
        '/classification/0.1/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Delete project
     * Delete the project including all related data.
     * @param {String} projectId projectId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectResponse}
     */
    this.deleteProject = function(projectId) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling deleteProject";
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ProjectResponse;

      return this.apiClient.callApi(
        '/classification/0.1/projects/{projectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Delete project stream
     * Delete a stream in the project.
     * @param {String} projectId projectId
     * @param {String} projectStreamLocationId projectStreamLocationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectResponse}
     */
    this.deleteProjectStream = function(projectId, projectStreamLocationId) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling deleteProjectStream";
      }

      // verify the required parameter 'projectStreamLocationId' is set
      if (projectStreamLocationId == undefined || projectStreamLocationId == null) {
        throw "Missing the required parameter 'projectStreamLocationId' when calling deleteProjectStream";
      }


      var pathParams = {
        'projectId': projectId,
        'projectStreamLocationId': projectStreamLocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ProjectResponse;

      return this.apiClient.callApi(
        '/classification/0.1/projects/{projectId}/streams/{projectStreamLocationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Get project
     * Get the info of an existing project.
     * @param {String} projectId projectId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectResponse}
     */
    this.getProject = function(projectId) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getProject";
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ProjectResponse;

      return this.apiClient.callApi(
        '/classification/0.1/projects/{projectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Get project stream by location
     * Download the project data.
     * @param {String} projectId projectId
     * @param {module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamLocation} streamLocation streamLocation
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.getProjectStreamByLocation = function(projectId, streamLocation) {
      var postBody = streamLocation;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getProjectStreamByLocation";
      }

      // verify the required parameter 'streamLocation' is set
      if (streamLocation == undefined || streamLocation == null) {
        throw "Missing the required parameter 'streamLocation' when calling getProjectStreamByLocation";
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/octet-stream'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/classification/0.1/projects/{projectId}/streams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Get project stream by locationid
     * Download the project data
     * @param {String} projectId projectId
     * @param {String} projectStreamLocationId projectStreamLocationId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.getProjectStreamByLocationId = function(projectId, projectStreamLocationId) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling getProjectStreamByLocationId";
      }

      // verify the required parameter 'projectStreamLocationId' is set
      if (projectStreamLocationId == undefined || projectStreamLocationId == null) {
        throw "Missing the required parameter 'projectStreamLocationId' when calling getProjectStreamByLocationId";
      }


      var pathParams = {
        'projectId': projectId,
        'projectStreamLocationId': projectStreamLocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/classification/0.1/projects/{projectId}/streams/{projectStreamLocationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Get all projects
     * Get all project definitions and their current state.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/String>} opts.status A list of status to filter on.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ProjectResponse}
     */
    this.getProjects = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ProjectResponse;

      return this.apiClient.callApi(
        '/classification/0.1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Updated project stream
     * Update the project data used by the classification engine.
     * @param {String} projectId projectId
     * @param {String} projectStreamLocationId projectStreamLocationId
     * @param {File} stream The project data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamResponse}
     */
    this.updateProjectStream = function(projectId, projectStreamLocationId, stream) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling updateProjectStream";
      }

      // verify the required parameter 'projectStreamLocationId' is set
      if (projectStreamLocationId == undefined || projectStreamLocationId == null) {
        throw "Missing the required parameter 'projectStreamLocationId' when calling updateProjectStream";
      }

      // verify the required parameter 'stream' is set
      if (stream == undefined || stream == null) {
        throw "Missing the required parameter 'stream' when calling updateProjectStream";
      }


      var pathParams = {
        'projectId': projectId,
        'projectStreamLocationId': projectStreamLocationId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StreamResponse;

      return this.apiClient.callApi(
        '/classification/0.1/projects/{projectId}/streams/{projectStreamLocationId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }


    /**
     * Upload project stream
     * Upload the project data used by the classification engine.
     * @param {String} projectId projectId
     * @param {File} stream The project data
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamResponse}
     */
    this.uploadProjectStream = function(projectId, stream) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw "Missing the required parameter 'projectId' when calling uploadProjectStream";
      }

      // verify the required parameter 'stream' is set
      if (stream == undefined || stream == null) {
        throw "Missing the required parameter 'stream' when calling uploadProjectStream";
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StreamResponse;

      return this.apiClient.callApi(
        '/classification/0.1/projects/{projectId}/streams/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }
  };

  return exports;
}));
