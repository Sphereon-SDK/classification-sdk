/*
 * Classification API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.classification.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.classification.model.StorageLocation;
import com.sphereon.sdk.classification.model.StreamLocation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Project settings
 */
@ApiModel(description = "Project settings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-17T13:02:31.104+02:00")
public class ProjectSettings {
  @SerializedName("projectStreamLocations")
  private List<StreamLocation> projectStreamLocations = new ArrayList<StreamLocation>();

  /**
   * Engine
   */
  @JsonAdapter(EngineEnum.Adapter.class)
  public enum EngineEnum {
    PREMIUM("PREMIUM");

    private String value;

    EngineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineEnum fromValue(String text) {
      for (EngineEnum b : EngineEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EngineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EngineEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("engine")
  private EngineEnum engine = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("projectName")
  private String projectName = null;

  @SerializedName("projectStorageLocation")
  private StorageLocation projectStorageLocation = null;

  @SerializedName("projectId")
  private String projectId = null;

  public ProjectSettings projectStreamLocations(List<StreamLocation> projectStreamLocations) {
    this.projectStreamLocations = projectStreamLocations;
    return this;
  }

  public ProjectSettings addProjectStreamLocationsItem(StreamLocation projectStreamLocationsItem) {
    this.projectStreamLocations.add(projectStreamLocationsItem);
    return this;
  }

   /**
   * Project stream locations
   * @return projectStreamLocations
  **/
  @ApiModelProperty(required = true, value = "Project stream locations")
  public List<StreamLocation> getProjectStreamLocations() {
    return projectStreamLocations;
  }

  public void setProjectStreamLocations(List<StreamLocation> projectStreamLocations) {
    this.projectStreamLocations = projectStreamLocations;
  }

  public ProjectSettings engine(EngineEnum engine) {
    this.engine = engine;
    return this;
  }

   /**
   * Engine
   * @return engine
  **/
  @ApiModelProperty(required = true, value = "Engine")
  public EngineEnum getEngine() {
    return engine;
  }

  public void setEngine(EngineEnum engine) {
    this.engine = engine;
  }

  public ProjectSettings description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Project description
   * @return description
  **/
  @ApiModelProperty(required = true, value = "Project description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ProjectSettings projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

   /**
   * Project name
   * @return projectName
  **/
  @ApiModelProperty(required = true, value = "Project name")
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }

  public ProjectSettings projectStorageLocation(StorageLocation projectStorageLocation) {
    this.projectStorageLocation = projectStorageLocation;
    return this;
  }

   /**
   * Project Files storage location
   * @return projectStorageLocation
  **/
  @ApiModelProperty(required = true, value = "Project Files storage location")
  public StorageLocation getProjectStorageLocation() {
    return projectStorageLocation;
  }

  public void setProjectStorageLocation(StorageLocation projectStorageLocation) {
    this.projectStorageLocation = projectStorageLocation;
  }

  public ProjectSettings projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @ApiModelProperty(value = "")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectSettings projectSettings = (ProjectSettings) o;
    return Objects.equals(this.projectStreamLocations, projectSettings.projectStreamLocations) &&
        Objects.equals(this.engine, projectSettings.engine) &&
        Objects.equals(this.description, projectSettings.description) &&
        Objects.equals(this.projectName, projectSettings.projectName) &&
        Objects.equals(this.projectStorageLocation, projectSettings.projectStorageLocation) &&
        Objects.equals(this.projectId, projectSettings.projectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectStreamLocations, engine, description, projectName, projectStorageLocation, projectId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectSettings {\n");
    
    sb.append("    projectStreamLocations: ").append(toIndentedString(projectStreamLocations)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    projectStorageLocation: ").append(toIndentedString(projectStorageLocation)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

