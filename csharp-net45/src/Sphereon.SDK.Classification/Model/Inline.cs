/* 
 * Classification API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Classification.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// External storage of classification result
    /// </summary>
    [DataContract]
    public partial class Inline :  IEquatable<Inline>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Inline" /> class.
        /// </summary>
        /// <param name="Pages">A list of pages.</param>
        /// <param name="Documents">A list of documents..</param>
        public Inline(List<ProjectClassificationPage> Pages = default(List<ProjectClassificationPage>), List<ProjectClassificationDocument> Documents = default(List<ProjectClassificationDocument>))
        {
            this.Pages = Pages;
            this.Documents = Documents;
        }
        
        /// <summary>
        /// A list of pages
        /// </summary>
        /// <value>A list of pages</value>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public List<ProjectClassificationPage> Pages { get; set; }

        /// <summary>
        /// A list of documents.
        /// </summary>
        /// <value>A list of documents.</value>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<ProjectClassificationDocument> Documents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Inline {\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Inline);
        }

        /// <summary>
        /// Returns true if Inline instances are equal
        /// </summary>
        /// <param name="other">Instance of Inline to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Inline other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pages == other.Pages ||
                    this.Pages != null &&
                    this.Pages.SequenceEqual(other.Pages)
                ) && 
                (
                    this.Documents == other.Documents ||
                    this.Documents != null &&
                    this.Documents.SequenceEqual(other.Documents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pages != null)
                    hash = hash * 59 + this.Pages.GetHashCode();
                if (this.Documents != null)
                    hash = hash * 59 + this.Documents.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
