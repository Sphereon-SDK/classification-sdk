/* 
 * Classification API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Classification.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// Word of text line
    /// </summary>
    [DataContract]
    public partial class ProjectClassificationWord :  IEquatable<ProjectClassificationWord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClassificationWord" /> class.
        /// </summary>
        /// <param name="Top">The top pixel coordinate of the text line.</param>
        /// <param name="Left">The left pixel coordinate of the text line.</param>
        /// <param name="Bottom">The bottom pixel coordinate of the text line.</param>
        /// <param name="Width">The width of the text line in pixel coordinate.</param>
        /// <param name="Right">The right pixel coordinate of the text line.</param>
        /// <param name="Text">The text of the word.</param>
        /// <param name="Height">The height of the text line in pixel coordinate.</param>
        public ProjectClassificationWord(int? Top = default(int?), int? Left = default(int?), int? Bottom = default(int?), int? Width = default(int?), int? Right = default(int?), string Text = default(string), int? Height = default(int?))
        {
            this.Top = Top;
            this.Left = Left;
            this.Bottom = Bottom;
            this.Width = Width;
            this.Right = Right;
            this.Text = Text;
            this.Height = Height;
        }
        
        /// <summary>
        /// The top pixel coordinate of the text line
        /// </summary>
        /// <value>The top pixel coordinate of the text line</value>
        [DataMember(Name="top", EmitDefaultValue=false)]
        public int? Top { get; set; }

        /// <summary>
        /// The left pixel coordinate of the text line
        /// </summary>
        /// <value>The left pixel coordinate of the text line</value>
        [DataMember(Name="left", EmitDefaultValue=false)]
        public int? Left { get; set; }

        /// <summary>
        /// The bottom pixel coordinate of the text line
        /// </summary>
        /// <value>The bottom pixel coordinate of the text line</value>
        [DataMember(Name="bottom", EmitDefaultValue=false)]
        public int? Bottom { get; set; }

        /// <summary>
        /// The width of the text line in pixel coordinate
        /// </summary>
        /// <value>The width of the text line in pixel coordinate</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// The right pixel coordinate of the text line
        /// </summary>
        /// <value>The right pixel coordinate of the text line</value>
        [DataMember(Name="right", EmitDefaultValue=false)]
        public int? Right { get; set; }

        /// <summary>
        /// The text of the word
        /// </summary>
        /// <value>The text of the word</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The height of the text line in pixel coordinate
        /// </summary>
        /// <value>The height of the text line in pixel coordinate</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectClassificationWord {\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  Bottom: ").Append(Bottom).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProjectClassificationWord);
        }

        /// <summary>
        /// Returns true if ProjectClassificationWord instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectClassificationWord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectClassificationWord other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Top == other.Top ||
                    this.Top != null &&
                    this.Top.Equals(other.Top)
                ) && 
                (
                    this.Left == other.Left ||
                    this.Left != null &&
                    this.Left.Equals(other.Left)
                ) && 
                (
                    this.Bottom == other.Bottom ||
                    this.Bottom != null &&
                    this.Bottom.Equals(other.Bottom)
                ) && 
                (
                    this.Width == other.Width ||
                    this.Width != null &&
                    this.Width.Equals(other.Width)
                ) && 
                (
                    this.Right == other.Right ||
                    this.Right != null &&
                    this.Right.Equals(other.Right)
                ) && 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.Height == other.Height ||
                    this.Height != null &&
                    this.Height.Equals(other.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Top != null)
                    hash = hash * 59 + this.Top.GetHashCode();
                if (this.Left != null)
                    hash = hash * 59 + this.Left.GetHashCode();
                if (this.Bottom != null)
                    hash = hash * 59 + this.Bottom.GetHashCode();
                if (this.Width != null)
                    hash = hash * 59 + this.Width.GetHashCode();
                if (this.Right != null)
                    hash = hash * 59 + this.Right.GetHashCode();
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.Height != null)
                    hash = hash * 59 + this.Height.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
