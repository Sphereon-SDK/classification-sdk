/**
 * Classification API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.sphereon.sdk.classification.handler/ApiClient', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationResponse', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationSettings', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ErrorResponse', 'com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.sphereon.sdk.classification.model/ClassificationJobResponse'), require('../com.sphereon.sdk.classification.model/ClassificationResponse'), require('../com.sphereon.sdk.classification.model/ClassificationSettings'), require('../com.sphereon.sdk.classification.model/ErrorResponse'), require('../com.sphereon.sdk.classification.model/StreamResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.classification) {
      root.classification = {};
    }
    root.classification.JobApi = factory(root.classification.ApiClient, root.classification.ClassificationJobResponse, root.classification.ClassificationResponse, root.classification.ClassificationSettings, root.classification.ErrorResponse, root.classification.StreamResponse);
  }
}(this, function(ApiClient, ClassificationJobResponse, ClassificationResponse, ClassificationSettings, ErrorResponse, StreamResponse) {
  'use strict';

  /**
   * Job service.
   * @module com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.api/JobApi
   * @version 0.3.2
   */

  /**
   * Constructs a new JobApi. 
   * @alias module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.api/JobApi
   * @class
   * @param {module:com.sphereon.sdk.classification.handler/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:com.sphereon.sdk.classification.handler/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a projectId
     * Add a project Id. Classification will not be started yet.
     * @param {String} jobId jobId
     * @param {String} projectId projectId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse} and HTTP response
     */
    this.addProjectIdWithHttpInfo = function(jobId, projectId) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addProjectId");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling addProjectId");
      }


      var pathParams = {
        'jobId': jobId,
        'projectId': projectId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ClassificationJobResponse;

      return this.apiClient.callApi(
        '/jobs/{jobId}/projects/{projectId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a projectId
     * Add a project Id. Classification will not be started yet.
     * @param {String} jobId jobId
     * @param {String} projectId projectId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse}
     */
    this.addProjectId = function(jobId, projectId) {
      return this.addProjectIdWithHttpInfo(jobId, projectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create classification job
     * Create a job using the given classification settings.
     * @param {module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationSettings} classificationSettings classificationSettings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse} and HTTP response
     */
    this.createClassificationJobWithHttpInfo = function(classificationSettings) {
      var postBody = classificationSettings;

      // verify the required parameter 'classificationSettings' is set
      if (classificationSettings === undefined || classificationSettings === null) {
        throw new Error("Missing the required parameter 'classificationSettings' when calling createClassificationJob");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json;charset=UTF-8'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ClassificationJobResponse;

      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create classification job
     * Create a job using the given classification settings.
     * @param {module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationSettings} classificationSettings classificationSettings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse}
     */
    this.createClassificationJob = function(classificationSettings) {
      return this.createClassificationJobWithHttpInfo(classificationSettings)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a job manually
     * Delete the Classification job and all related files
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse} and HTTP response
     */
    this.deleteJobWithHttpInfo = function(jobId) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ClassificationJobResponse;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a job manually
     * Delete the Classification job and all related files
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse}
     */
    this.deleteJob = function(jobId) {
      return this.deleteJobWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Classification result
     * Get the classification job definition and current state. Please not that you can differentiate based on http response status
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationResponse} and HTTP response
     */
    this.getClassificationResultWithHttpInfo = function(jobId) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getClassificationResult");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ClassificationResponse;

      return this.apiClient.callApi(
        '/jobs/{jobId}/result', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Classification result
     * Get the classification job definition and current state. Please not that you can differentiate based on http response status
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationResponse}
     */
    this.getClassificationResult = function(jobId) {
      return this.getClassificationResultWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Job definition and state
     * Get the classification job definition and current state. Please not that you can differentiate based on http response status
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse} and HTTP response
     */
    this.getJobWithClaimParametersWithHttpInfo = function(jobId) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobWithClaimParameters");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ClassificationJobResponse;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Job definition and state
     * Get the classification job definition and current state. Please not that you can differentiate based on http response status
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse}
     */
    this.getJobWithClaimParameters = function(jobId) {
      return this.getJobWithClaimParametersWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all jobs
     * Get all classification job definitions and their current state.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/String>} opts.status A list of status to filter on.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse} and HTTP response
     */
    this.getJobsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ClassificationJobResponse;

      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get all jobs
     * Get all classification job definitions and their current state.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/String>} opts.status A list of status to filter on.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse}
     */
    this.getJobs = function(opts) {
      return this.getJobsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit classification job for processing
     * Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse} and HTTP response
     */
    this.submitJobWithHttpInfo = function(jobId) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling submitJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = ClassificationJobResponse;

      return this.apiClient.callApi(
        '/jobs/{jobId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Submit classification job for processing
     * Start classification of the previously uploaded file(s), using the supplied settings associated with the job in the request body. You can only submit the job after a new Job is created with status INPUTS_UPLOADED or resubmit an existing Job with status ERROR. In all cases the job Id in the path must match the jobId in the request
     * @param {String} jobId jobId
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/ClassificationJobResponse}
     */
    this.submitJob = function(jobId) {
      return this.submitJobWithHttpInfo(jobId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a file
     * Upload an input image. Classification will not be started yet.
     * @param {String} jobId jobId
     * @param {File} stream The additional binary image (file/inputstream) to be classified
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamResponse} and HTTP response
     */
    this.uploadInputFileWithHttpInfo = function(jobId, stream) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling uploadInputFile");
      }

      // verify the required parameter 'stream' is set
      if (stream === undefined || stream === null) {
        throw new Error("Missing the required parameter 'stream' when calling uploadInputFile");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'stream': stream
      };

      var authNames = ['oauth2schema'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json;charset=UTF-8'];
      var returnType = StreamResponse;

      return this.apiClient.callApi(
        '/jobs/{jobId}/streams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Upload a file
     * Upload an input image. Classification will not be started yet.
     * @param {String} jobId jobId
     * @param {File} stream The additional binary image (file/inputstream) to be classified
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.sphereon.sdk.classification.handler/com.sphereon.sdk.classification.model/StreamResponse}
     */
    this.uploadInputFile = function(jobId, stream) {
      return this.uploadInputFileWithHttpInfo(jobId, stream)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
