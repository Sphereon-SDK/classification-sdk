/* 
 * Classification API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Classification.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// Project info
    /// </summary>
    [DataContract]
    public partial class ClassificationProjectInfo :  IEquatable<ClassificationProjectInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationProjectInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClassificationProjectInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationProjectInfo" /> class.
        /// </summary>
        /// <param name="ProjectStreamLocations">Original documents (required).</param>
        /// <param name="ProjectId">Project id.</param>
        public ClassificationProjectInfo(List<StreamLocation> ProjectStreamLocations = default(List<StreamLocation>), string ProjectId = default(string))
        {
            // to ensure "ProjectStreamLocations" is required (not null)
            if (ProjectStreamLocations == null)
            {
                throw new InvalidDataException("ProjectStreamLocations is a required property for ClassificationProjectInfo and cannot be null");
            }
            else
            {
                this.ProjectStreamLocations = ProjectStreamLocations;
            }
            this.ProjectId = ProjectId;
        }
        
        /// <summary>
        /// Original documents
        /// </summary>
        /// <value>Original documents</value>
        [DataMember(Name="projectStreamLocations", EmitDefaultValue=false)]
        public List<StreamLocation> ProjectStreamLocations { get; set; }

        /// <summary>
        /// Project id
        /// </summary>
        /// <value>Project id</value>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassificationProjectInfo {\n");
            sb.Append("  ProjectStreamLocations: ").Append(ProjectStreamLocations).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClassificationProjectInfo);
        }

        /// <summary>
        /// Returns true if ClassificationProjectInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ClassificationProjectInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassificationProjectInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProjectStreamLocations == other.ProjectStreamLocations ||
                    this.ProjectStreamLocations != null &&
                    this.ProjectStreamLocations.SequenceEqual(other.ProjectStreamLocations)
                ) && 
                (
                    this.ProjectId == other.ProjectId ||
                    this.ProjectId != null &&
                    this.ProjectId.Equals(other.ProjectId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProjectStreamLocations != null)
                    hash = hash * 59 + this.ProjectStreamLocations.GetHashCode();
                if (this.ProjectId != null)
                    hash = hash * 59 + this.ProjectId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
