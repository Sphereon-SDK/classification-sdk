/*
 * Classification API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.classification.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.sphereon.sdk.classification.model.ClassificationProjectInfo;
import com.sphereon.sdk.classification.model.Inline;
import com.sphereon.sdk.classification.model.Stream;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * The result from document classification
 */
@ApiModel(description = "The result from document classification")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-10-17T13:02:31.104+02:00")
public class ClassificationProjectResult {
  @SerializedName("projectInfo")
  private ClassificationProjectInfo projectInfo = null;

  @SerializedName("inline")
  private Inline inline = null;

  @SerializedName("stream")
  private Stream stream = null;

  /**
   * Classification type
   */
  @JsonAdapter(ClassificationTypeEnum.Adapter.class)
  public enum ClassificationTypeEnum {
    DOCUMENT("DOCUMENT"),
    
    PAGES("PAGES"),
    
    DOCUMENT_SEPARATION("DOCUMENT_SEPARATION");

    private String value;

    ClassificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassificationTypeEnum fromValue(String text) {
      for (ClassificationTypeEnum b : ClassificationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ClassificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ClassificationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("classificationType")
  private ClassificationTypeEnum classificationType = null;

  /**
   * Gets or Sets resultType
   */
  @JsonAdapter(ResultTypeEnum.Adapter.class)
  public enum ResultTypeEnum {
    INLINE("INLINE"),
    
    STORAGE("STORAGE");

    private String value;

    ResultTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultTypeEnum fromValue(String text) {
      for (ResultTypeEnum b : ResultTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResultTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("resultType")
  private List<ResultTypeEnum> resultType = null;

  public ClassificationProjectResult projectInfo(ClassificationProjectInfo projectInfo) {
    this.projectInfo = projectInfo;
    return this;
  }

   /**
   * Project info
   * @return projectInfo
  **/
  @ApiModelProperty(required = true, value = "Project info")
  public ClassificationProjectInfo getProjectInfo() {
    return projectInfo;
  }

  public void setProjectInfo(ClassificationProjectInfo projectInfo) {
    this.projectInfo = projectInfo;
  }

  public ClassificationProjectResult inline(Inline inline) {
    this.inline = inline;
    return this;
  }

   /**
   * Storage of classification result in response
   * @return inline
  **/
  @ApiModelProperty(value = "Storage of classification result in response")
  public Inline getInline() {
    return inline;
  }

  public void setInline(Inline inline) {
    this.inline = inline;
  }

  public ClassificationProjectResult stream(Stream stream) {
    this.stream = stream;
    return this;
  }

   /**
   * External storage of classification result
   * @return stream
  **/
  @ApiModelProperty(value = "External storage of classification result")
  public Stream getStream() {
    return stream;
  }

  public void setStream(Stream stream) {
    this.stream = stream;
  }

  public ClassificationProjectResult classificationType(ClassificationTypeEnum classificationType) {
    this.classificationType = classificationType;
    return this;
  }

   /**
   * Classification type
   * @return classificationType
  **/
  @ApiModelProperty(value = "Classification type")
  public ClassificationTypeEnum getClassificationType() {
    return classificationType;
  }

  public void setClassificationType(ClassificationTypeEnum classificationType) {
    this.classificationType = classificationType;
  }

  public ClassificationProjectResult resultType(List<ResultTypeEnum> resultType) {
    this.resultType = resultType;
    return this;
  }

  public ClassificationProjectResult addResultTypeItem(ResultTypeEnum resultTypeItem) {
    if (this.resultType == null) {
      this.resultType = new ArrayList<ResultTypeEnum>();
    }
    this.resultType.add(resultTypeItem);
    return this;
  }

   /**
   * Returned result in response and/or store
   * @return resultType
  **/
  @ApiModelProperty(value = "Returned result in response and/or store")
  public List<ResultTypeEnum> getResultType() {
    return resultType;
  }

  public void setResultType(List<ResultTypeEnum> resultType) {
    this.resultType = resultType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassificationProjectResult classificationProjectResult = (ClassificationProjectResult) o;
    return Objects.equals(this.projectInfo, classificationProjectResult.projectInfo) &&
        Objects.equals(this.inline, classificationProjectResult.inline) &&
        Objects.equals(this.stream, classificationProjectResult.stream) &&
        Objects.equals(this.classificationType, classificationProjectResult.classificationType) &&
        Objects.equals(this.resultType, classificationProjectResult.resultType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(projectInfo, inline, stream, classificationType, resultType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassificationProjectResult {\n");
    
    sb.append("    projectInfo: ").append(toIndentedString(projectInfo)).append("\n");
    sb.append("    inline: ").append(toIndentedString(inline)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    classificationType: ").append(toIndentedString(classificationType)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

