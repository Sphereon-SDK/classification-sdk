/* 
 * Classification API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// The project response
    /// </summary>
    [DataContract]
    public partial class ProjectResponse :  IEquatable<ProjectResponse>
    {
        /// <summary>
        /// The status of the project action
        /// </summary>
        /// <value>The status of the project action</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum CREATED for "CREATED"
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED,
            
            /// <summary>
            /// Enum PROJECTUPLOADED for "PROJECT_UPLOADED"
            /// </summary>
            [EnumMember(Value = "PROJECT_UPLOADED")]
            PROJECTUPLOADED,
            
            /// <summary>
            /// Enum ERROR for "ERROR"
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR,
            
            /// <summary>
            /// Enum DELETED for "DELETED"
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETED
        }

        /// <summary>
        /// The status of the project action
        /// </summary>
        /// <value>The status of the project action</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectResponse" /> class.
        /// </summary>
        /// <param name="ProjectId">ProjectId.</param>
        /// <param name="ProjectSettings">The project info.</param>
        public ProjectResponse(string ProjectId = null, ProjectSettings ProjectSettings = null)
        {
            this.ProjectId = ProjectId;
            this.ProjectSettings = ProjectSettings;
        }
        
        /// <summary>
        /// The creation date/time of this job in ISO 8601 format
        /// </summary>
        /// <value>The creation date/time of this job in ISO 8601 format</value>
        [DataMember(Name="creationTime", EmitDefaultValue=false)]
        public DateTime? CreationTime { get; private set; }
        /// <summary>
        /// The last update date/time of this job in ISO 8601 format
        /// </summary>
        /// <value>The last update date/time of this job in ISO 8601 format</value>
        [DataMember(Name="updateTime", EmitDefaultValue=false)]
        public DateTime? UpdateTime { get; private set; }
        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }
        /// <summary>
        /// The project info
        /// </summary>
        /// <value>The project info</value>
        [DataMember(Name="projectSettings", EmitDefaultValue=false)]
        public ProjectSettings ProjectSettings { get; set; }
        /// <summary>
        /// A status message, which can be informational, warning or error. A message here does not indicate an error perse
        /// </summary>
        /// <value>A status message, which can be informational, warning or error. A message here does not indicate an error perse</value>
        [DataMember(Name="statusMessage", EmitDefaultValue=false)]
        public string StatusMessage { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectResponse {\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  UpdateTime: ").Append(UpdateTime).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ProjectSettings: ").Append(ProjectSettings).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProjectResponse);
        }

        /// <summary>
        /// Returns true if ProjectResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreationTime == other.CreationTime ||
                    this.CreationTime != null &&
                    this.CreationTime.Equals(other.CreationTime)
                ) && 
                (
                    this.UpdateTime == other.UpdateTime ||
                    this.UpdateTime != null &&
                    this.UpdateTime.Equals(other.UpdateTime)
                ) && 
                (
                    this.ProjectId == other.ProjectId ||
                    this.ProjectId != null &&
                    this.ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    this.ProjectSettings == other.ProjectSettings ||
                    this.ProjectSettings != null &&
                    this.ProjectSettings.Equals(other.ProjectSettings)
                ) && 
                (
                    this.StatusMessage == other.StatusMessage ||
                    this.StatusMessage != null &&
                    this.StatusMessage.Equals(other.StatusMessage)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreationTime != null)
                    hash = hash * 59 + this.CreationTime.GetHashCode();
                if (this.UpdateTime != null)
                    hash = hash * 59 + this.UpdateTime.GetHashCode();
                if (this.ProjectId != null)
                    hash = hash * 59 + this.ProjectId.GetHashCode();
                if (this.ProjectSettings != null)
                    hash = hash * 59 + this.ProjectSettings.GetHashCode();
                if (this.StatusMessage != null)
                    hash = hash * 59 + this.StatusMessage.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }
    }

}
