/* 
 * Classification API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Sphereon.SDK.Classification.Client.SwaggerDateConverter;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// The classification Document
    /// </summary>
    [DataContract]
    public partial class ProjectClassificationDocument :  IEquatable<ProjectClassificationDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClassificationDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProjectClassificationDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectClassificationDocument" /> class.
        /// </summary>
        /// <param name="FirstPage">First page (required).</param>
        /// <param name="LastPage">Last page (required).</param>
        /// <param name="Results">A list of classification results (required).</param>
        public ProjectClassificationDocument(int? FirstPage = default(int?), int? LastPage = default(int?), List<ProjectClassificationResult> Results = default(List<ProjectClassificationResult>))
        {
            // to ensure "FirstPage" is required (not null)
            if (FirstPage == null)
            {
                throw new InvalidDataException("FirstPage is a required property for ProjectClassificationDocument and cannot be null");
            }
            else
            {
                this.FirstPage = FirstPage;
            }
            // to ensure "LastPage" is required (not null)
            if (LastPage == null)
            {
                throw new InvalidDataException("LastPage is a required property for ProjectClassificationDocument and cannot be null");
            }
            else
            {
                this.LastPage = LastPage;
            }
            // to ensure "Results" is required (not null)
            if (Results == null)
            {
                throw new InvalidDataException("Results is a required property for ProjectClassificationDocument and cannot be null");
            }
            else
            {
                this.Results = Results;
            }
        }
        
        /// <summary>
        /// First page
        /// </summary>
        /// <value>First page</value>
        [DataMember(Name="firstPage", EmitDefaultValue=false)]
        public int? FirstPage { get; set; }

        /// <summary>
        /// Last page
        /// </summary>
        /// <value>Last page</value>
        [DataMember(Name="lastPage", EmitDefaultValue=false)]
        public int? LastPage { get; set; }

        /// <summary>
        /// A list of classification results
        /// </summary>
        /// <value>A list of classification results</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<ProjectClassificationResult> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectClassificationDocument {\n");
            sb.Append("  FirstPage: ").Append(FirstPage).Append("\n");
            sb.Append("  LastPage: ").Append(LastPage).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProjectClassificationDocument);
        }

        /// <summary>
        /// Returns true if ProjectClassificationDocument instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectClassificationDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectClassificationDocument other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstPage == other.FirstPage ||
                    this.FirstPage != null &&
                    this.FirstPage.Equals(other.FirstPage)
                ) && 
                (
                    this.LastPage == other.LastPage ||
                    this.LastPage != null &&
                    this.LastPage.Equals(other.LastPage)
                ) && 
                (
                    this.Results == other.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(other.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstPage != null)
                    hash = hash * 59 + this.FirstPage.GetHashCode();
                if (this.LastPage != null)
                    hash = hash * 59 + this.LastPage.GetHashCode();
                if (this.Results != null)
                    hash = hash * 59 + this.Results.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
