/* 
 * Classification API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Classification.Model
{
    /// <summary>
    /// Classification settings
    /// </summary>
    [DataContract]
    public partial class ClassificationSettings :  IEquatable<ClassificationSettings>
    {

        /// <summary>
        /// Gets or Sets ClassificationTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClassificationTypesEnum
        {
            
            /// <summary>
            /// Enum DOCUMENT for "DOCUMENT"
            /// </summary>
            [EnumMember(Value = "DOCUMENT")]
            DOCUMENT,
            
            /// <summary>
            /// Enum PAGES for "PAGES"
            /// </summary>
            [EnumMember(Value = "PAGES")]
            PAGES,
            
            /// <summary>
            /// Enum DOCUMENTSEPARATION for "DOCUMENT_SEPARATION"
            /// </summary>
            [EnumMember(Value = "DOCUMENT_SEPARATION")]
            DOCUMENTSEPARATION
        }


        /// <summary>
        /// Gets or Sets DetailLevels
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DetailLevelsEnum
        {
            
            /// <summary>
            /// Enum SUMMARY for "SUMMARY"
            /// </summary>
            [EnumMember(Value = "SUMMARY")]
            SUMMARY,
            
            /// <summary>
            /// Enum DEFAULT for "DEFAULT"
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT,
            
            /// <summary>
            /// Enum RAW for "RAW"
            /// </summary>
            [EnumMember(Value = "RAW")]
            RAW
        }


        /// <summary>
        /// Gets or Sets ResultTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultTypesEnum
        {
            
            /// <summary>
            /// Enum INLINE for "INLINE"
            /// </summary>
            [EnumMember(Value = "INLINE")]
            INLINE,
            
            /// <summary>
            /// Enum STORAGE for "STORAGE"
            /// </summary>
            [EnumMember(Value = "STORAGE")]
            STORAGE
        }


        /// <summary>
        /// Gets or Sets ClassificationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ClassificationTypeEnum
        {
            
            /// <summary>
            /// Enum DOCUMENT for "DOCUMENT"
            /// </summary>
            [EnumMember(Value = "DOCUMENT")]
            DOCUMENT,
            
            /// <summary>
            /// Enum PAGES for "PAGES"
            /// </summary>
            [EnumMember(Value = "PAGES")]
            PAGES,
            
            /// <summary>
            /// Enum DOCUMENTSEPARATION for "DOCUMENT_SEPARATION"
            /// </summary>
            [EnumMember(Value = "DOCUMENT_SEPARATION")]
            DOCUMENTSEPARATION
        }

        /// <summary>
        /// OCR mode
        /// </summary>
        /// <value>OCR mode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OcrModeEnum
        {
            
            /// <summary>
            /// Enum ALWAYS for "ALWAYS"
            /// </summary>
            [EnumMember(Value = "ALWAYS")]
            ALWAYS,
            
            /// <summary>
            /// Enum NEVER for "NEVER"
            /// </summary>
            [EnumMember(Value = "NEVER")]
            NEVER,
            
            /// <summary>
            /// Enum AUTO for "AUTO"
            /// </summary>
            [EnumMember(Value = "AUTO")]
            AUTO
        }

        /// <summary>
        /// List of classification types, currently only one allowed
        /// </summary>
        /// <value>List of classification types, currently only one allowed</value>
        [DataMember(Name="classificationTypes", EmitDefaultValue=false)]
        public List<ClassificationTypesEnum> ClassificationTypes { get; set; }
        /// <summary>
        /// Level of detail for the results
        /// </summary>
        /// <value>Level of detail for the results</value>
        [DataMember(Name="detailLevels", EmitDefaultValue=false)]
        public List<DetailLevelsEnum> DetailLevels { get; set; }
        /// <summary>
        /// Store classification result in
        /// </summary>
        /// <value>Store classification result in</value>
        [DataMember(Name="resultTypes", EmitDefaultValue=false)]
        public List<ResultTypesEnum> ResultTypes { get; set; }
        /// <summary>
        /// Gets or Sets ClassificationType
        /// </summary>
        [DataMember(Name="classificationType", EmitDefaultValue=false)]
        public List<ClassificationTypeEnum> ClassificationType { get; set; }
        /// <summary>
        /// OCR mode
        /// </summary>
        /// <value>OCR mode</value>
        [DataMember(Name="ocrMode", EmitDefaultValue=false)]
        public OcrModeEnum? OcrMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationSettings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ClassificationSettings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationSettings" /> class.
        /// </summary>
        /// <param name="Lifecycle">Lifecycle.</param>
        /// <param name="ClassificationTypes">List of classification types, currently only one allowed (required).</param>
        /// <param name="MaxResults">Maximum number of classification results per document or page per classification project (required).</param>
        /// <param name="DetailLevels">Level of detail for the results (required).</param>
        /// <param name="InputStorageLocation">Storage container location.</param>
        /// <param name="ResultStorageLocation">Classification result location (required).</param>
        /// <param name="ResultTypes">Store classification result in.</param>
        /// <param name="ClassificationType">ClassificationType.</param>
        /// <param name="OcrMode">OCR mode.</param>
        public ClassificationSettings(Lifecycle Lifecycle = null, List<ClassificationTypesEnum> ClassificationTypes = null, int? MaxResults = null, List<DetailLevelsEnum> DetailLevels = null, StorageLocation InputStorageLocation = null, StorageLocation ResultStorageLocation = null, List<ResultTypesEnum> ResultTypes = null, List<ClassificationTypeEnum> ClassificationType = null, OcrModeEnum? OcrMode = null)
        {
            // to ensure "ClassificationTypes" is required (not null)
            if (ClassificationTypes == null)
            {
                throw new InvalidDataException("ClassificationTypes is a required property for ClassificationSettings and cannot be null");
            }
            else
            {
                this.ClassificationTypes = ClassificationTypes;
            }
            // to ensure "MaxResults" is required (not null)
            if (MaxResults == null)
            {
                throw new InvalidDataException("MaxResults is a required property for ClassificationSettings and cannot be null");
            }
            else
            {
                this.MaxResults = MaxResults;
            }
            // to ensure "DetailLevels" is required (not null)
            if (DetailLevels == null)
            {
                throw new InvalidDataException("DetailLevels is a required property for ClassificationSettings and cannot be null");
            }
            else
            {
                this.DetailLevels = DetailLevels;
            }
            // to ensure "ResultStorageLocation" is required (not null)
            if (ResultStorageLocation == null)
            {
                throw new InvalidDataException("ResultStorageLocation is a required property for ClassificationSettings and cannot be null");
            }
            else
            {
                this.ResultStorageLocation = ResultStorageLocation;
            }
            this.Lifecycle = Lifecycle;
            this.InputStorageLocation = InputStorageLocation;
            this.ResultTypes = ResultTypes;
            this.ClassificationType = ClassificationType;
            this.OcrMode = OcrMode;
        }
        
        /// <summary>
        /// Lifecycle
        /// </summary>
        /// <value>Lifecycle</value>
        [DataMember(Name="lifecycle", EmitDefaultValue=false)]
        public Lifecycle Lifecycle { get; set; }
        /// <summary>
        /// Maximum number of classification results per document or page per classification project
        /// </summary>
        /// <value>Maximum number of classification results per document or page per classification project</value>
        [DataMember(Name="maxResults", EmitDefaultValue=false)]
        public int? MaxResults { get; set; }
        /// <summary>
        /// Storage container location
        /// </summary>
        /// <value>Storage container location</value>
        [DataMember(Name="inputStorageLocation", EmitDefaultValue=false)]
        public StorageLocation InputStorageLocation { get; set; }
        /// <summary>
        /// Classification result location
        /// </summary>
        /// <value>Classification result location</value>
        [DataMember(Name="resultStorageLocation", EmitDefaultValue=false)]
        public StorageLocation ResultStorageLocation { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassificationSettings {\n");
            sb.Append("  Lifecycle: ").Append(Lifecycle).Append("\n");
            sb.Append("  ClassificationTypes: ").Append(ClassificationTypes).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  DetailLevels: ").Append(DetailLevels).Append("\n");
            sb.Append("  InputStorageLocation: ").Append(InputStorageLocation).Append("\n");
            sb.Append("  ResultStorageLocation: ").Append(ResultStorageLocation).Append("\n");
            sb.Append("  ResultTypes: ").Append(ResultTypes).Append("\n");
            sb.Append("  ClassificationType: ").Append(ClassificationType).Append("\n");
            sb.Append("  OcrMode: ").Append(OcrMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ClassificationSettings);
        }

        /// <summary>
        /// Returns true if ClassificationSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of ClassificationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassificationSettings other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Lifecycle == other.Lifecycle ||
                    this.Lifecycle != null &&
                    this.Lifecycle.Equals(other.Lifecycle)
                ) && 
                (
                    this.ClassificationTypes == other.ClassificationTypes ||
                    this.ClassificationTypes != null &&
                    this.ClassificationTypes.SequenceEqual(other.ClassificationTypes)
                ) && 
                (
                    this.MaxResults == other.MaxResults ||
                    this.MaxResults != null &&
                    this.MaxResults.Equals(other.MaxResults)
                ) && 
                (
                    this.DetailLevels == other.DetailLevels ||
                    this.DetailLevels != null &&
                    this.DetailLevels.SequenceEqual(other.DetailLevels)
                ) && 
                (
                    this.InputStorageLocation == other.InputStorageLocation ||
                    this.InputStorageLocation != null &&
                    this.InputStorageLocation.Equals(other.InputStorageLocation)
                ) && 
                (
                    this.ResultStorageLocation == other.ResultStorageLocation ||
                    this.ResultStorageLocation != null &&
                    this.ResultStorageLocation.Equals(other.ResultStorageLocation)
                ) && 
                (
                    this.ResultTypes == other.ResultTypes ||
                    this.ResultTypes != null &&
                    this.ResultTypes.SequenceEqual(other.ResultTypes)
                ) && 
                (
                    this.ClassificationType == other.ClassificationType ||
                    this.ClassificationType != null &&
                    this.ClassificationType.SequenceEqual(other.ClassificationType)
                ) && 
                (
                    this.OcrMode == other.OcrMode ||
                    this.OcrMode != null &&
                    this.OcrMode.Equals(other.OcrMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Lifecycle != null)
                    hash = hash * 59 + this.Lifecycle.GetHashCode();
                if (this.ClassificationTypes != null)
                    hash = hash * 59 + this.ClassificationTypes.GetHashCode();
                if (this.MaxResults != null)
                    hash = hash * 59 + this.MaxResults.GetHashCode();
                if (this.DetailLevels != null)
                    hash = hash * 59 + this.DetailLevels.GetHashCode();
                if (this.InputStorageLocation != null)
                    hash = hash * 59 + this.InputStorageLocation.GetHashCode();
                if (this.ResultStorageLocation != null)
                    hash = hash * 59 + this.ResultStorageLocation.GetHashCode();
                if (this.ResultTypes != null)
                    hash = hash * 59 + this.ResultTypes.GetHashCode();
                if (this.ClassificationType != null)
                    hash = hash * 59 + this.ClassificationType.GetHashCode();
                if (this.OcrMode != null)
                    hash = hash * 59 + this.OcrMode.GetHashCode();
                return hash;
            }
        }
    }

}
